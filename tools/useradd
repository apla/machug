#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;

my ($home, $gid, $uid, $system, $shell, $groups, @groups);

GetOptions (
	"d|home=s" => \$home,
	"g|gid=i" => \$gid,
	"u|uid=i" => \$uid,
	"r|system" => \$system, # assumed when used _name as user name
	"s|shell" => \$shell,
	"G|groups=s" => \$groups,
);

my $user = shift;

die "you must specify username\n"
	unless defined $user;

die "user already exists\n"
	if `sudo dscl . -read /Users/$user 2>/dev/null`;

unless (defined $shell) {
	$shell = '/usr/bin/false';
	$shell = '/bin/bash'
		if $user !~ /^_/;
}

# first, we need to get uids and gids
my @uids = split /[\n\r\s]+/, `sudo dscl . -list /Users UniqueID | cut -c 20-22 | sort -g`;
my @gids = split /[\n\r\s]+/, `sudo dscl . -list /Groups PrimaryGroupID | cut -c 32-34 | sort -g`;

if (defined $uid) {
	die "uid #$uid is already used"
		if scalar grep {$_ eq $uid} @uids;
} else {
	my $uid = $uids[-1] + 1;
	if ($user =~ /^_/) {
		# this is daemon, we try to use max id before 500
		warn "assumed daemon user\n";
		for (my $c = $#uids; $c >= 0; $c--) {
			my $c_uid = $uids[$c];
			if ($c_uid < 500 && $c_uid + 1 < $uids[$c + 1]) {
				$uid = $c_uid + 1;
				last;
			}
		}
	}

}

warn "proposed uid is: $proposed_uid\n";

system(sprintf("dscl -create . /Users/%s\n", $name));
system(sprintf("dscl -createprop . /Users/%s gid %d\n", $name, $gid));
system(sprintf("dscl -createprop . /Users/%s uid %d\n", $name, $uid));
system(sprintf("dscl -createprop . /Users/%s shell %s\n", $name, $shell));
system(sprintf("dscl -createprop . /Users/%s realname '%s'\n", $name, $comment));
system(sprintf("dscl -createprop . /users/%s home %s\n", $name, $home));
system(sprintf("dscl -createprop . /users/%s passwd %s\n", $name, $password));

